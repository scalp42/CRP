# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # Every Vagrant virtual environment requires a box to build off of.
  #Berkshelf issue https://github.com/RiotGames/berkshelf-vagrant/issues/4
  #%x( berks install --path compiled_cookbooks )
  config.vm.define :mysql_server do |mysql_server|
    mysql_server.vm.provider :virtualbox do |vb|
      # vb.gui = true
      vb.customize [
        'modifyvm', :id,
        '--name', "MySQL Server",
        '--cpus', 1,
        '--memory', 768,
        '--nictype1', 'virtio',
        '--nictype2', 'virtio'
      ]
    end
    mysql_server.vm.box = "ubuntu12.04.2"
    mysql_server.vm.box_url = "http://d1owbwdg5aiwzw.cloudfront.net/ubuntu12.04.2.box"
    mysql_server.vm.hostname = "mysql"
    mysql_server.vm.network :private_network, ip: "192.168.33.13"
    mysql_server.vm.network :forwarded_port, guest: 3306, host: 3306, auto_correct: true
    mysql_server.vm.provision :chef_solo do |chef|
      #Berkshelf issue https://github.com/RiotGames/berkshelf-vagrant/issues/4
      chef.cookbooks_path = "compiled_cookbooks"
      chef.data_bags_path = "data_bags"
      chef.roles_path = "roles"
      chef.add_role "base" 
      chef.json = {
        :mysql => {
          :bind_address => "0.0.0.0",
          :server_root_password => "PASSWORD",
          :server_repl_password => "PASSWORD",
          :server_debian_password => "PASSWORD"
        }
      }
      chef.add_recipe "mysql::server"
      chef.add_recipe "fuse_database"
      chef.add_recipe "tomcat_database"
    end
  end

  config.vm.define :fuse_server do |fuse_server|
    fuse_server.vm.provider :virtualbox do |vb|
      # vb.gui = true
      vb.customize [
        'modifyvm', :id,
        '--name', "FuseESB Server",
        '--cpus', 2,
        '--memory', 2560,
        '--nictype1', 'virtio',
        '--nictype2', 'virtio'
      ]
    end
    fuse_server.vm.box = "ubuntu12.04.2"
    fuse_server.vm.box_url = "http://d1owbwdg5aiwzw.cloudfront.net/ubuntu12.04.2.box"
    fuse_server.vm.hostname = "fuse"
    fuse_server.vm.network :private_network, ip: "192.168.33.10"
    fuse_server.vm.network :forwarded_port, guest: 8181, host: 8181, auto_correct: true
    fuse_server.vm.provision :chef_solo do |chef|
      chef.cookbooks_path = "compiled_cookbooks"
      chef.data_bags_path = "data_bags"
      chef.roles_path = "roles"      
      chef.add_role "base"
      chef.json = {
        :java => {
          :install_flavor => "oracle",
          :jdk_version => "6",
          :oracle => {
            :accept_oracle_download_terms => true
          } ,
          # :jdk => {
          #   :"6" => {
          #     :x86_64 => {
          #       # checksum is generated by openssl dgst -sha256 jdk-6u41-linux-x64.bin
          #       :url => 'http://download.oracle.com/otn-pub/java/jdk/6u41-b02/jdk-6u41-linux-x64.bin',
          #       :checksum => 'c87ae51533efa3d41a2c4086d8bf1f6887e2bd7d0b1beadba667d64f89d55598'
          #     }
          #   }
          # }
        },
        :ant => {
          :version => "1.9.0",
          :checksum => "d79dd4961a508d41618c98c3f1871d6c1eb1372f70b79439ba9c0e8c3ddc7e5f",
          :install_method => "source"
        },
        # :"fuse-esb" => {
        #   :version => "7.1.0.fuse-047",
        #   :checksum => "942fe1ff45a790265130dcde5ca6627f56f99c8b1efee51b30d44967dae3e91b"
        # },
        :maven => {
          :version => "3"
        }
      }

      chef.add_recipe "java"
      chef.add_recipe "ant"
      chef.add_recipe "maven"
      chef.add_recipe "fuse-esb"
      chef.add_recipe "subversion::client"
      # chef.add_recipe "jenkins::node"
      # chef.add_recipe "chef-client"
    end
    fuse_server.vm.provision :shell, :path => "fuse_deploy.sh"
  end

  config.vm.define :tomcat_server do |tomcat_server|
    tomcat_server.vm.provider :virtualbox do |vb|
      # vb.gui = true
      vb.customize [
        'modifyvm', :id,
        '--name', "Tomcat Server",
        '--cpus', 1,
        '--memory', 768,
        '--nictype1', 'virtio',
        '--nictype2', 'virtio'
      ]
    end
    tomcat_server.vm.box = "ubuntu12.04.2"
    tomcat_server.vm.box_url = "http://d1owbwdg5aiwzw.cloudfront.net/ubuntu12.04.2.box"
    tomcat_server.vm.hostname = "tomcat"
    tomcat_server.vm.network :private_network, ip: "192.168.33.11"
    tomcat_server.vm.network :forwarded_port, guest: 8080, host: 8080, auto_correct: true
    tomcat_server.vm.provision :chef_solo do |chef|
      chef.cookbooks_path = "compiled_cookbooks"
      chef.data_bags_path = "data_bags"
      chef.roles_path = "roles"
      chef.add_role "base"
      chef.json = {
        :java => {
          :install_flavor => "oracle",
          :jdk_version => "6",
          :oracle => {
            :accept_oracle_download_terms => true
          },
          # :jdk => {
          #   :"6" => {
          #     :x86_64 => {                
          #       # checksum is generated by openssl dgst -sha256 jdk-6u41-linux-x64.bin
          #       :url => 'http://download.oracle.com/otn-pub/java/jdk/6u41-b02/jdk-6u41-linux-x64.bin',
          #       :checksum => 'c87ae51533efa3d41a2c4086d8bf1f6887e2bd7d0b1beadba667d64f89d55598'
          #     }
          #   }
          # }
        },
        :ant => {
          :version => "1.9.0",
          :checksum => "d79dd4961a508d41618c98c3f1871d6c1eb1372f70b79439ba9c0e8c3ddc7e5f",
          :install_method => "source"
        },
        :maven => {
          :version => "3"
          # :3 => {
          #   :url => "http://apache.mirrors.tds.net/maven/maven-3/3.0.4/binaries/apache-maven-3.0.4-bin.tar.gz", 
          #   :checksum => ""
          # }
        }
      }
      chef.add_recipe "java"
      chef.add_recipe "ant"
      chef.add_recipe "maven"
      chef.add_recipe "subversion::client"
      # chef.add_recipe "tomcat"
    end
  end

  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.
  # config.vm.box_url = "http://domain.com/path/to/above.box"

  # Create a forwarded port mapping which allows access to a specific port

  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network :forwarded_port, guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network :private_network, ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network :public_network

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider :virtualbox do |vb|
  #   # Don't boot with headless mode
  #   vb.gui = true
  #
  #   # Use VBoxManage to customize the VM. For example to change memory:
  #   vb.customize ["modifyvm", :id, "--memory", "1024"]
  # end
  #
  # View the documentation for the provider you're using for more
  # information on available options.

  # Enable provisioning with Puppet stand alone.  Puppet manifests
  # are contained in a directory path relative to this Vagrantfile.
  # You will need to create the manifests directory and a manifest in
  # the file base.pp in the manifests_path directory.
  #
  # An example Puppet manifest to provision the message of the day:
  #
  # # group { "puppet":
  # #   ensure => "present",
  # # }
  # #
  # # File { owner => 0, group => 0, mode => 0644 }
  # #
  # # file { '/etc/motd':
  # #   content => "Welcome to your Vagrant-built virtual machine!
  # #               Managed by Puppet.\n"
  # # }
  #
  # config.vm.provision :puppet do |puppet|
  #   puppet.manifests_path = "manifests"
  #   puppet.manifest_file  = "base.pp"
  # end

  # Enable provisioning with chef solo, specifying a cookbooks path, roles
  # path, and data_bags path (all relative to this Vagrantfile), and adding
  # some recipes and/or roles.
  #
  # config.vm.provision :chef_solo do |chef|
  #   chef.cookbooks_path = "../my-recipes/cookbooks"
  #   chef.roles_path = "../my-recipes/roles"
  #   chef.data_bags_path = "../my-recipes/data_bags"
  #   chef.add_recipe "mysql"
  #   chef.add_role "web"
  #
  #   # You may also specify custom JSON attributes:
  #   chef.json = { :mysql_password => "foo" }
  # end

  # Enable provisioning with chef server, specifying the chef server URL,
  # and the path to the validation key (relative to this Vagrantfile).
  #
  # The Opscode Platform uses HTTPS. Substitute your organization for
  # ORGNAME in the URL and validation key.
  #
  # If you have your own Chef Server, use the appropriate URL, which may be
  # HTTP instead of HTTPS depending on your configuration. Also change the
  # validation key to validation.pem.
  #
  # config.vm.provision :chef_client do |chef|
  #   chef.chef_server_url = "https://api.opscode.com/organizations/ORGNAME"
  #   chef.validation_key_path = "ORGNAME-validator.pem"
  # end
  #
  # If you're using the Opscode platform, your validator client is
  # ORGNAME-validator, replacing ORGNAME with your organization name.
  #
  # If you have your own Chef Server, the default validation client name is
  # chef-validator, unless you changed the configuration.
  #
  #   chef.validation_client_name = "ORGNAME-validator"
end
