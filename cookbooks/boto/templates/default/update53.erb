#!/usr/bin/env python

### BEGIN INIT INFO
# Provides:             update53
# Required-Start:       $network $local_fs
# Required-Stop:
# Should-Start:
# Should-Stop:
# X-Start-Before:
# X-Stop-After:
# Default-Start:        2 3 4 5
# Default-Stop:         0 1 6
# Short-Description:    Update Route53
# Description:          Update Route53 zone to reflect IP address.
### END INIT INFO

#script is based on https://gist.github.com/sgk/5686239/raw/effa1ec8c045c949fb709ab86084ecfab64d3ff5/update53.py

import boto
import boto.ec2
import boto.route53.record

#region = ''
route53_zone_id = <%= node['boto']['route53']['zone_id'] %>
domain = <%= node['boto']['route53']['domain'] =%> # last '.' required.
subdomain_local = <%= node['boto']['route53']['subdomain_local'] =%>

metadata = boto.utils.get_instance_metadata()

def getname(instanceid):
  #conn = boto.ec2.connect_to_region(region, aws_access_key_id=access_key, aws_secret_access_key=secret_access_key)
  #return conn.get_all_instances(instanceid)[0].instances[0].tags['Name']
  hosts = open('/etc/hostname','r')
  hostname = hosts.readline()
  return hostname.split('.')[0]

def getinstanceid():
  return metadata['instance-id']

def getlocalip():
  return metadata['local-ipv4']

def getpublicip():
  return metadata['public-ipv4']

def route53_delete(name):
  name = name + '.' + domain
  print 'Route53 Delete %s' % name
  conn = boto.connect_route53()
  changes = boto.route53.record.ResourceRecordSets(conn, route53_zone_id)
  for rr in conn.get_all_rrsets(route53_zone_id, 'A', name, maxitems=10):
    if rr.name != name or rr.type != 'A':
      continue
    change = changes.add_change('DELETE', name, 'A')
    for ip in rr.resource_records:
      change.add_value(ip)
  changes.commit()

def route53_update(name, ipaddr):
  name = name + '.' + domain
  print 'Route53 Update %s %s' % (name, ipaddr)
  conn = boto.connect_route53()
  changes = boto.route53.record.ResourceRecordSets(conn, route53_zone_id)
  for rr in conn.get_all_rrsets(route53_zone_id, 'A', name, maxitems=10):
    if rr.name != name or rr.type != 'A':
      continue
    change = changes.add_change('DELETE', name, 'A')
    for ip in rr.resource_records:
      change.add_value(ip)
  change = changes.add_change('CREATE', name, 'A')
  for ip in ipaddr.split(','):
    change.add_value(ip)
  changes.commit()

def main():
  import sys
  if len(sys.argv) == 1:
    name = getname(getinstanceid())
    publicip = getpublicip()
    localip = getlocalip()
    print 'EC2 instance name=%s public=%s local=%s' % (name, publicip, localip)
  elif len(sys.argv) == 2:
    name = getname(getinstanceid())
    publicip = getpublicip()
    localip = getlocalip()
    if sys.argv[1] == 'start':
      route53_update(name, publicip)
      route53_update(name + subdomain_local, localip)
    elif sys.argv[1] == 'stop':
      route53_delete(name)
      route53_delete(name + subdomain_local)
  else:
    print 'Usage: %s {start|stop}' % sys.argv[0].split('/')[-1]
    sys.exit(1)

if __name__ == '__main__':
  main()